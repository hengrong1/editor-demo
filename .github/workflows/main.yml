name: Multi-Platform Release CI

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Extract Version
        id: extract_version
        run: echo ::set-output name=version::${GITHUB_REF#refs/tags/v}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_ACTIONS_TOKEN }}
        with:
          tag_name: ${{ steps.extract_version.outputs.version }}
          release_name: Release ${{ steps.extract_version.outputs.version }}
          draft: false
          prerelease: false

  build-and-deploy:
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Node.js & pnpm
        uses: actions/setup-node@v2
        with:
          node-version: 20
#          cache: 'pnpm'

      - name: Install pnpm
        run: npm install -g pnpm

#      - name: Install Dependencies
#        run: pnpm install
#
#      - name: Build Frontend (Vite + Vue)
#        run: pnpm run build

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache Rustup Components
        uses: Swatinem/rust-cache@v1

      - name: Install Tauri CLI
        run: cargo install tauri-cli --locked

      - name: Build Tauri App
        run: tauri build --release

      - name: Upload Artifact (MacOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_ACTIONS_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: target/release/bundle/macos/YourApp.app
          asset_name: YourApp-macOS-x64.zip
          content_type: application/zip

      - name: Upload Artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_ACTIONS_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: target/release/bundle/windows/YourApp.exe
          asset_name: YourApp-windows-x64.exe
          content_type: application/vnd.microsoft.portable-executable
